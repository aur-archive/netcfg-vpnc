==== Purpose ====
The goal is currently to accomplish two things:
  - Have a netcfg compatible VPNC configuration
    - sudo netcfg up home-office
  - Have an option to automatically connect to your VPN at boot time with net-auto-vpnc

==== Files ====
/usr/lib/network/connections/vpnc
/etc/network.d/examples/vpnc.example
/usr/share/doc/netcfg-vpnc/README
/etc/rc.d/net-auto-vpnc

==== current state ====
The net-auto-vpnc script currently has the following assumptions:
  - A maximum of two interfaces 
  - A simple routing table. (local subnet and a default route)
  - WIRED_INTERFACE and/or WIRELESS_INTERFACE is defined in /etc/rc.conf
  - A /etc/nework.d/examples/vpnc.example has been configured and copied into /etc/network.d

==== rc.conf variables ====

VPN_CONNECTION 
  - This is the name of the netcfg vpnc file created under /etc/network.d/. 
  - See /etc/network.d/examples/vpnc.example
VPN_DONOTRUNONTHISINTERFACE 
  - If you have mulitple interfaces (eth0, wlan0) and you only desire the VPNC configuration to connect when wlan0 is active, then add eth0. 
VPN_ROUTE_WAITTIME
  - This allows the script to wait, once, for x number of seconds in an effort to validate that a default route is available. If if does not find a 'default' route, then the script exits.
VPN_INTERFACE_WAITTIME 
  - This allows the script to wait once for x number of seconds in an effort to allow the particular interface to be seen as up and running. If an interface is found to be RUNNING (via ifconfig), then the default route is checked and VPNC is started accordingly. If a interface is not found to be active, then the script exits.

==== TO-DO ====
- Make this work with the NETWORKS array or (even better?) simply look for a running interface with a default route on it. 
- Make VPN_CONNECTION an array where multiple VPN's can be defined on a priority basis. This would allow for failover host B have a VPN attempt initiated should host A fail to connect.
